<?php

/**
 * @file
 * Install, update, and uninstall functions for the Email Campaigns module.
 */

/**
 * Implements hook_menu().
 */
function shd_email_campaigns_menu() {
  $items['user/%user/track/sentmail'] = array(
    'title' => 'Track sent mailers',
    'page callback' => '_shd_email_campaigns_user_tracker',
    'access callback' => 'user_access',
    'access arguments' => array('track shd user invite'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * hook_permission()
 */
function shd_email_campaigns_permission() {
  return array(
    'track shd user invite' => array(
      'title' => t('Track shd user invite email record'),
      'description' => t('Track the use of invitation campaigns.'),
    ),
  );
}

/**
 * Page callback: Displays statistics for sent mailers.
 * @return array
 *   A render array containing mailers statistics. If information for the
 * mailers was not found, this will deliver a page not found error via
 * drupal_not_found().
 */
function _shd_email_campaigns_user_tracker() {
  if ($account = user_load(arg(1))) {
    $header = array(
      array('data' => t('User Name')),
      array('data' => t('User Email')),
      array('data' => t('Role'), 'field' => 'role', 'sort' => 'desc'),
      array('data' => t('Timestamp'), 'field' => 'created', 'sort' => 'desc'),
    );
    $query = db_select('shd_email_campaigns', 'a', array('target' => 'slave'))->extend('PagerDefault')->extend('TableSort');
    $query
    ->fields('a', array('username', 'useremail', 'role', 'created'))
    ->orderByHeader($header);
    $result = $query->execute();
    $rows = array();
    foreach ($result as $log) {
      $rows[] = array($log->username, $log->useremail, $log->role,
        array(
          'data' => format_date($log->created, 'short')),
      );
    }
    drupal_set_title(format_username($account));
    $build['shd_email_campaigns_table'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('No statistics available.'),
    );
    $build['shd_email_campaigns_pager'] = array('#theme' => 'pager');
    return $build;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements hook_block_info().
 */
function shd_email_campaigns_block_info() {
  $block = array();
  $block['list_modules'] = array(
    'info' => t('SHD Email Campaigns form.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function shd_email_campaigns_block_view($delta='') {
  $block['subject'] = NULL;
  $block['content'] = drupal_get_form('shd_email_campaigns_form');
  return $block;
}

/**
 * Implements hook_form().
 */
function shd_email_campaigns_form($form, &$form_state) {
  global $base_url, $user;
  if ($user->uid != 0) {
    $default_mail = $form['message']['email']['#default_value'] = $user->mail;
    $default_name = $form['message']['name']['#default_value'] = $user->name;
  }
  else {
    $default_mail = $form['message']['email']['#default_value'] = '';
    $default_name = $form['message']['name']['#default_value'] = '';
  }
  $form['message']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Email'),
    '#size' => 20,
    '#maxlength' => 256,
    '#default_value' => $default_mail,
    '#required' => TRUE,
  );
  $form['message']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Name'),
    '#size' => 20,
    '#maxlength' => 256,
    '#default_value' => $default_name,
    '#required' => TRUE,
  );
  $form['message']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#size' => 20,
    '#maxlength' => 256,
    '#default_value' => '',
  );
/*   $form['message']['recipients'] = array(
    '#type' => 'textarea',
    '#title' => t('Send To'),
    '#cols' => 50,
    '#rows' => 4,
    '#description' => t('Enter commas seprated email ids for multiple email ids.'),
    '#required' => TRUE,
  ); */
  $form['message']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#cols' => 50,
    '#rows' => 4,
    '#description' => t('Enter the content here.'),
  );
  $form['upload'] = array(
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => 22,
    '#upload_validators'  => array("file_validate_extensions" => array("csv")),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Mail'),
  );
  return $form;
}

/**
 * Implements action to perform on submit.
 */
function shd_email_campaigns_actions($form, &$form_state) {
  $batch = array(
      'title' => t('Importing CSV ...'),
      'operations' => array(),
      'init_message' => t('Commencing'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('An error occurred during processing'),
      'finished' => 'shd_email_campaigns_import_finished',
    ) ;
    if ( isset( $form_state['values']['csvupload'] ) ) {
      if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
        $batch['operations'][] = array('_shd_email_campaigns_remember_filename', array( $form_state['values']['csvupload'] ) ) ;
        $line_count = 1 ;
        $first = TRUE ;
        $line = fgetcsv($handle, 4096);

        while ( $line = fgetcsv($handle, 4096) ) {
          /**
           * we use base64_encode to ensure we don't overload the batch
           * processor by stuffing complex objects into it
           */
          $batch['operations'][] = array('_shd_email_campaigns_import_line', array(array_map('base64_encode', $line))); 

      // Set recipients email ids.
      $to = $line[4];
      $from = $form_state['values']['email'];
      $messagetxt = $form_state['values']['body'];
      $subject = $form_state['values']['subject'];
      $body[] = 'Email: ' . $from . ' <br /> Message: ' . $messagetxt;
      $params = array(
        'body' => $body,
        'subject' => $subject,
      );
      // Send mail to recipients.
      if (drupal_mail('shd_email_campaigns', 'some_mail_key', $to, language_default(), $params, $from, TRUE)) {
        shd_email_campaigns_form_savedata($form, $form_state);
      }
		 
        }
        fclose($handle);
      } 
    } 
    batch_set($batch);
}

/**
 * Implements hook_validate().
 */
function shd_email_campaigns_form_validate($form, &$form_state) {

    $validators = array(
      'file_validate_extensions' => array( 'csv' ),
    );
    
    if ( $file = file_save_upload('upload', $validators, "public://", FILE_EXISTS_REPLACE) ) {
      $form_state['values']['csvupload'] = $file->destination;       
    }
    else {
      form_set_error('csvImporter', t('Unable to copy upload file'));
    } 

    if ( isset( $form_state['values']['csvupload'] ) ) {
      if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
        $line_count = 1 ;
        $first = TRUE ;
        if ( $line = fgetcsv($handle, 4096) ) {
  
          //  This is where we can validate aspects of the file itself, like the number of columns
            /* if(count($line) != 3){
              form_set_error('csvfile', t('This file has the incorrect number of columns. Expecting 3'));
            } */
          //  End validating aspects of the CSV file
          
        }
        fclose($handle);
      }
      else {
        form_set_error('upload', t('Unable to read uploaded file !filepath', array('!filepath' => $form_state['values']['csvupload'])));
      }
    }
	
}

/**
 * Save data in database once file is uploaded and mail is sent.
 */
function shd_email_campaigns_form_savedata($form, &$form_state) {
  global $user;
  $roles_index = end($user->roles);
  if ($user->uid != 0) {
    $nid = db_insert('shd_email_campaigns')
          ->fields(array('username', 'useremail', 'role', 'created'))
          ->values(array(
            'username' => $user->name,
            'useremail' => $user->mail,
            'role' => $roles_index,
            'created' => REQUEST_TIME,
            ))
          ->execute();
  }
}

/**
 * Implements hook_mail().
 */
function shd_email_campaigns_mail($key, &$message, $params) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8;',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal',
  );
  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}

/**
 * Implements hook_submit().
 */
function shd_email_campaigns_form_submit($form, &$form_state) {
  shd_email_campaigns_actions($form, $form_state);
}
/**
 * Batch API helpers
 */
  function shd_email_campaigns_import_finished($success, $results, $operations) {  
    if ( !empty($results['failed_rows']) ) {
      $dir  = file_directory_path() . '/csvImporter/' ;
      if ( file_check_directory( $dir, FILE_CREATE_DIRECTORY ) ) {
        $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
        $csv_filepath = $dir .'/'. $csv_filename;
        $targs = array(
          '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
          '%csv_filename' => $csv_filename,
          '%csv_filepath' => $csv_filepath,
        ) ;
        if ( $handle = fopen($csv_filepath, 'w+') ) {
          foreach( $results['failed_rows'] as $failed_row ) {
            fputcsv($handle, $failed_row);
          }
          fclose($handle);
          drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
        }
        else {
          drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
        }
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
      }
    }
    drupal_set_message('The CSV import has completed.');
  }
  
  
  function _shd_email_campaigns_remember_filename($filename, &$context) {
    $context['results']['uploaded_filename'] = $filename;
  }

/**
 *  End batch API helpers
 */
 
/**
 * The important part, this is where we "do something" with an individual CSV line
 */
  function _shd_email_campaigns_import_line($line, $session_nid, &$context) {
      
    $context['results']['rows_imported']++;
    $line = $cleaned_line = array_map('base64_decode', $line);
    
	//Show the row count by default
      $context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
    
      //Or, Provide some feedback about the row currently being processed
      $context['message'] = t('Importing %title', array('%title' => $line[0]));
    //  End giving feedback to the importer

    //  This is where you would convert the line of the CSV file into a new object, be it a node, user, etc.
     // drupal_set_message("Parsed line {$line[0]}");
    //  End converting the line to a drupal object
    
    //  You can capture and report on failed lines by doing something like this
      if ( $line[1] == 'ROW' && $line[2] == 'FAILS' ) {
        $context['results']['failed_rows'][] = $line ;
      }
    //  End capturing and reporting on failed lines
   
  }
//  End converting an individual line of the CSV into something new
